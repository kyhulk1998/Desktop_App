# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from dialog import Ui_Dialog
from PyQt5 import QtCore, QtGui, QtWidgets
from pathlib import Path
import json
import random
import generateOTP as otp
import processFile as readFile
import hashlib
import os.path
import datetime
from dateutil.parser import parse
from os import path


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(1200, 700)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.textEdit.setFont(font)
        self.textEdit.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.textEdit.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.textEdit.setHorizontalScrollBarPolicy(
            QtCore.Qt.ScrollBarAlwaysOff)
        self.textEdit.setSizeAdjustPolicy(
            QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.textEdit.setUndoRedoEnabled(False)
        self.textEdit.setReadOnly(True)
        self.textEdit.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.textEdit.setObjectName("textEdit")
        self.horizontalLayout.addWidget(self.textEdit)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1200, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuImport_config = QtWidgets.QMenu(self.menuFile)
        self.menuImport_config.setObjectName("menuImport_config")
        MainWindow.setMenuBar(self.menubar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionUser_configuration = QtWidgets.QAction(MainWindow)
        self.actionUser_configuration.setObjectName("actionUser_configuration")
        self.actionFile_configuration = QtWidgets.QAction(MainWindow)
        self.actionFile_configuration.setObjectName("actionFile_configuration")
        self.menuImport_config.addAction(self.actionUser_configuration)
        self.menuImport_config.addAction(self.actionFile_configuration)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.menuImport_config.menuAction())
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.actionUser_configuration.triggered.connect(
            lambda: self.importUser())
        self.actionFile_configuration.triggered.connect(
            lambda: self.importFile())
        self.actionOpen.triggered.connect(lambda: self.openFile())

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                         "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                         "p, li { white-space: pre-wrap; }\n"
                                         "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
                                         "<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:2px; margin-bottom:2px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:2px;\"><br /></p></body></html>"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuImport_config.setTitle(
            _translate("MainWindow", "Import Configuration"))
        self.actionOpen.setText(_translate("MainWindow", "Open..."))
        self.actionOpen.setStatusTip(_translate("MainWindow", "Open file"))
        self.actionOpen.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionUser_configuration.setText(
            _translate("MainWindow", "User..."))
        self.actionFile_configuration.setText(
            _translate("MainWindow", "Files ..."))
    ########### Insert Information ##########

    def importUser(self):
        home_dir = str(Path.home())
        link = QtWidgets.QFileDialog.getOpenFileName(
            None, 'Open file', home_dir, "*.json")
        fname = link[0]
        try:
            if fname == "":
                raise "File Not found"
        except:
            icon = QtWidgets.QMessageBox.Critical
            notification("File not found !!! Please check again", icon)
            return
        try:
            if not os.path.exists("config"):
                os.makedirs("config")
                if fname.endswith(".json"):
                    with open(fname, 'r') as fh:
                        data = json.load(fh)
                        with open("config\\user.json", "w") as saveFile:
                            json.dump(data, saveFile, indent=4)
                            notification(
                                "---===--- Import successfully ---===---", None)
        except:
            icon = QtWidgets.QMessageBox.Critical
            notification(
                "-------- ERROR import !! Please try again --------", icon)

    def importFile(self):
        if not os.path.exists("config"):
            os.makedirs("config")
        try:
            home_dir = str(Path.home())
            link = QtWidgets.QFileDialog.getOpenFileName(
                None, 'Open file', home_dir, "*.json")
            fname = link[0]
            try:
                if fname == "":
                    raise "File Not found"
            except:
                icon = QtWidgets.QMessageBox.Critical
                notification("File not found !!! Please check again", icon)
                return
            fileExist = path.exists("config\\file.json")
            if fileExist:
                temp = dict()
                with open(fname, 'r') as f:
                    data = json.load(f)
                    with open("config\\file.json", "r") as fh:
                        temp = json.load(fh)
                        for key, value in data.items():
                            for key_have in temp.keys():
                                if key_have == key:
                                    raise "Duplicate infomation"
                            temp[key] = value
                with open("config\\file.json", "w") as saveFile:
                    json.dump(temp, saveFile, indent=4)
                    notification(
                        "---===--- Import successfully ---===---", None)

            else:
                if fname.endswith(".json"):
                    with open(fname, 'r') as fh:
                        data = json.load(fh)
                        with open("config\\file.json", "w") as saveFile:
                            json.dump(data, saveFile, indent=4)
                            notification(
                                "---===--- Import successfully ---===---", None)
        except:
            icon = QtWidgets.QMessageBox.Critical
            notification("File Duplicate or ERROR !!!", icon)

            ############# Open file and Read #####################

    def openFile(self):
        check = True
        count = 0
        home_dir = str(Path.home())
        link = QtWidgets.QFileDialog.getOpenFileName(
            None, "Open File", home_dir, "File Types(*.pdf *.docx)")
        fname = link[0]
        try:
            if fname == "":
                raise "File Not found"
        except:
            icon = QtWidgets.QMessageBox.Critical
            notification("File not found !!! Please check again", icon)
            return
            ########## LoadInfo ###############
        try:
            username, phone = loadInfo("config\\user.json", None)
        except FileNotFoundError:
            icon = QtWidgets.QMessageBox.Warning
            notification(
                "======= Please import User configuration =======", icon)
            return
        try:
            license_id, downloader, editable, printable, expDate, owner, random_code = loadInfo(
                "config\\file.json", hash_CheckId(fname))
            #### Check Time ####
            formatTime = parse(expDate)
            timeExp = formatTime.strftime('%Y%m%d%H%M%S%f')
            timeNow = datetime.datetime.now().strftime('%Y%m%d%H%M%S%f')

            if int(timeExp) - int(timeNow) < 0:
                icon = QtWidgets.QMessageBox.Warning
                notification(
                    "=== File Expired, Please try again ! ===", icon)
                return
        except FileNotFoundError:
            icon = QtWidgets.QMessageBox.Warning
            notification(
                " You NOT import file configuration OR file has ERROR ", icon)
            return

        time_create, hotp = otp.OTP_generator(
            license_id, downloader, username, phone, expDate, random_code)
        while check:
            ######## Call Dialog ##########
            count += 1
            icon = QtWidgets.QMessageBox.Critical
            if count > 3:
                import sys
                notification(
                    "Number of attempts has run out!!!!", icon)
                check = False
                sys.exit()
            OTP_check = otp.OTP_verification(verifyUser(
                license_id, random_code), time_create, hotp, random_code)
            if OTP_check == "OTP is wrong!!":
                notification(
                    "Verify information incorrect, Please try again !!!", icon)
                continue
            elif OTP_check == "OTP expires!!!":
                import sys
                notification(
                    "OTP has expired , Please try again !!!", icon)
                sys.exit()
            else:
                if fname.endswith(".pdf"):
                    # try:
                    self.textEdit.clear()
                    if str(editable) == "1":
                        self.textEdit.setTextInteractionFlags(
                            QtCore.Qt.TextEditorInteraction)
                    self.textEdit.setText(readFile.getPDF(fname, otp.key_generator(
                        license_id, editable, printable, username, phone, owner)))
                    check = False
                    # except:
                    #     notification(
                    #         "Verify information incorrect OR ERROR , Please try again !!!", icon)
            # elif fname.endswith(".docx"):
            #     self.textEdit.clear()
            #     self.textEdit.setText(readFile.getDoc(fname, otp.key_generator(
            #         license_id, edit, tprint, username, phoneNo, owner, static_random)))
            #     check = False


def loadInfo(link, hashFile):
    if link == "config\\file.json":
        random_code = random.randint(1000, 9999)
        with open(link, "r") as f:
            data = json.load(f)
            for key, value in data.items():
                if hashFile in key:
                    license_id = value[0].get("license_id")
                    downloader = value[0].get("downloader")
                    editable = value[0].get("editable")
                    printable = value[0].get("printable")
                    expDate = value[0].get("expDate")
                    owner = value[0].get("owner")
                    return license_id, downloader, editable, printable, expDate, owner, random_code

    if link == "config\\user.json":
        with open(link, "r") as f:
            data = json.load(f)
            username = data["User"][0].get("username")
            phone = data["User"][0].get("phone")
            return username, phone


def hash_CheckId(link):
    sha256 = hashlib.sha256()
    with open(link, 'rb') as f:
        while True:
            data = f.read()
            if not data:
                break
            sha256.update(data)
    return sha256.hexdigest()


def verifyUser(licenseId, random_code):

    syntaxSms = "Syxtax SMS: V " + str(licenseId) + \
        " " + str(random_code) + " Send +84343021605"
    note = """
    * You have 3 attempts OTP *
    * Don't share OTP for anyone *
    * OTP will 5 minutes expired *
    """
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    ui.lSmsSyntax.setText(syntaxSms)
    ui.lDetails.setStyleSheet("color: red")
    font = QtGui.QFont()
    font.setPointSize(10)
    font.setItalic(True)
    ui.lDetails.setFont(font)
    ui.lDetails.setText(note)
    if Dialog.exec_() == QtWidgets.QDialog.Accepted:
        value = ui.lineEdit.text()
        Dialog.deleteLater()
        return value
    else:
        import sys
        sys.exit()
    Dialog.show()


def notification(message, icon):
    msg = QtWidgets.QMessageBox()
    msg.setWindowTitle("Notification")
    if icon == None:
        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
        msg.setText(message)
        x = msg.exec_()
    else:
        msg.setIcon(icon)
        msg.setText(message)
        x = msg.exec_()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
